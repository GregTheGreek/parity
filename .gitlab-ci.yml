stages:
  - test
  - build
  - package
  - publish

image: parity/rust:gitlab-ci

variables:
  RUST_BACKTRACE: 1
  CI_SERVER_NAME: "GitLab CI"
  CARGO_HOME: "$CI_PROJECT_DIR/cargo"

  BUILD_TARGET: ubuntu
  BUILD_ARCH: amd64
  CARGO_TARGET: x86_64-unknown-linux-gnu
  LIBSSL: "libssl1.0.0 (>=1.0.0)"

cache:
  key: "$CI_JOB_NAME"
  paths:
    - target/
    - cargo/

.releaseable_branches: # list of git refs for building GitLab artifacts (think "pre-release binaries")
  only: &releaseable_branches
    - master
    - stable
    - beta
    - tags
    - schedules

.publishable_branches: # list of git refs for publishing builds to the "production" locations
  only: &publishable_branches
    - schedules # Our nightly builds from schedule, on `master`
    - "v*" # Our version tags

.collect_artifacts: &collect_artifacts
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    when: on_success
    expire_in: 1 mos
    paths:
    - artifacts/

.determine_version: |
  export VERSION="$(grep -m 1 "version =" Cargo.toml | awk '{print $3}' | tr -d '"' | tr -d "\n")"
  RELEASE_TRACK="$(git branch --contains HEAD|grep -E 'master|beta|stable'|xargs)"
  if [[ "master" = "$RELEASE_TRACK" ]]; then RELEASE_TRACK="nightly"; fi
  export RELEASE_TRACK

before_script:
  - *determine_version

#### stage: test

test:rust:stable: &test
  stage: test
  script:
    - scripts/gitlab/test.sh stable
  tags:
    - rust-stable

.optional_test: &optional_test
  <<: *test
  allow_failure: true
  only:
    - triggers
    - master

test:rust:beta:
  <<: *optional_test
  script:
    - scripts/gitlab/test.sh beta

test:rust:nightly:
  <<: *optional_test
  script:
    - scripts/gitlab/test.sh nightly

#test:rustfmt:
#  <<: *optional_test
#  script:
#    - scripts/gitlab/rustfmt.sh

#test:clippy:
#  <<: *optional_test
#  script:
#    - scripts/gitlab/clippy.sh

test:coverage:
  stage: test
  only:
    - master
  script:
    - scripts/gitlab/coverage.sh
  tags:
    - kcov
  allow_failure: true


#### stage: build

build:linux:ubuntu:amd64: &build
  stage: build
  only: *releaseable_branches
  script:
    - scripts/gitlab/build-unix.sh
  tags:
    - rust-stable
  <<: *collect_artifacts

build:linux:debian:amd64:
  <<: *build
  image: parity/rust-debian:gitlab-ci
  variables:
    BUILD_TARGET: debian
    LIBSSL: "libssl1.1 (>=1.1.0)"
  tags:
    - rust-debian

build:linux:centos:x86_64:
  <<: *build
  image: parity/rust-centos:gitlab-ci
  variables:
    BUILD_ARCH: x86_64
    BUILD_TARGET: centos
  tags:
    - rust-centos

build:linux:ubuntu:arm64:
  <<: *build
  image: parity/rust-arm64:gitlab-ci
  variables:
    BUILD_ARCH: arm64
    CARGO_TARGET: aarch64-unknown-linux-gnu
  tags:
    - rust-arm

build:linux:ubuntu:armhf:
  <<: *build
  image: parity/rust-armv7:gitlab-ci
  variables:
    BUILD_ARCH: armhf
    CARGO_TARGET: armv7-unknown-linux-gnueabihf
  tags:
    - rust-arm

build:macos:x86_64:
  <<: *build
  variables:
    BUILD_TARGET: macos
    CARGO_TARGET: x86_64-apple-darwin
  tags:
    - osx

build:windows:x86_64:
  <<: *build
  cache:
    key: "%CI_JOB_NAME%"
    paths:
      - target/
      # No cargo caching, since fetch-locking on Windows gets stuck
  variables:
    BUILD_TARGET: windows
  script:
    - scripts/gitlab/build-windows.sh
  tags:
   - rust-windows

#### stage: package

package:linux:snap:amd64:
  stage: package
  only: *releaseable_branches
  dependencies:
    - build:linux:ubuntu:amd64
  script:
    - scripts/gitlab/package-snap.sh
  <<: *collect_artifacts

package:linux:snap:arm64:
  stage: package
  only: *releaseable_branches
  variables:
    BUILD_ARCH: arm64
  dependencies:
    - build:linux:ubuntu:arm64
  script:
    - scripts/gitlab/package-snap.sh
  <<: *collect_artifacts

package:linux:snap:armhf:
  stage: package
  only: *releaseable_branches
  variables:
    BUILD_ARCH: armhf
  dependencies:
    - build:linux:ubuntu:armhf
  script:
    - scripts/gitlab/package-snap.sh
  <<: *collect_artifacts

package:windows:x86_64:installer:
  stage: package
  only: *releaseable_branches
  dependencies:
    - build:windows:x86_64
  script:
    - scripts/gitlab/package-windows-installer.sh
  <<: *collect_artifacts

#### stage: publish

publish:linux:snap:amd64:
  stage: publish
  only: *publishable_branches
  dependencies:
    - package:linux:snap:amd64
  script:
    - scripts/gitlab/publish-snap.sh

publish:linux:snap:i386:
  stage: publish
  only: *publishable_branches
  variables:
    BUILD_ARCH: i386
  dependencies:
    - package:linux:snap:i386
  script:
    - scripts/gitlab/publish-snap.sh

publish:linux:snap:arm64:
  stage: publish
  only: *publishable_branches
  variables:
    BUILD_ARCH: arm64
  dependencies:
    - package:linux:snap:arm64
  script:
    - scripts/gitlab/publish-snap.sh

publish:linux:snap:armhf:
  stage: publish
  only: *publishable_branches
  variables:
    BUILD_ARCH: armhf
  dependencies:
    - package:linux:snap:armhf
  script:
    - scripts/gitlab/publish-snap.sh

publish:linux:docker:amd64:
  stage: publish
  only: *publishable_branches
  dependencies:
    - build:linux:ubuntu:amd64
  script:
    - scripts/gitlab/publish-docker.sh
  tags:
    - docker
